# ===========================================
# 生产环境部署配置
# ===========================================
version: '3.8'

include:
  - ../compose/base.yml
  - ../compose/vector.yml
  - ../compose/monitoring.yml
  - ../compose/gateway.yml
  - ../compose/services/api-server.yml
  - ../compose/services/workers.yml
  - ../compose/services/pdf-validator.yml
  - ../compose/services/llm-service.yml

services:
  # 覆盖基础服务配置以适应生产环境
  postgres:
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../init/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        max_attempts: 3
    # 生产环境不暴露端口，仅内部访问
    ports: []

  redis:
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.15'
      restart_policy:
        condition: on-failure
        max_attempts: 3
    # 生产环境不暴露端口
    ports: []

  minio:
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_SERVER_URL: https://minio.${DOMAIN_NAME}
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        max_attempts: 3
    # 生产环境不暴露端口，通过nginx代理
    ports: []

  # 生产环境的API服务器配置
  api-server:
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.8'
        reservations:
          memory: 512M
          cpus: '0.4'
      restart_policy:
        condition: on-failure
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 30s
        order: start-first
    # 生产环境不直接暴露端口，通过nginx代理
    ports: []

  # 工作节点高可用配置
  rule-worker:
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s

  ai-worker:
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.8'
        reservations:
          memory: 512M
          cpus: '0.4'
      restart_policy:
        condition: on-failure
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 30s

  # LLM服务生产环境配置
  llm-service:
    environment:
      - GIN_MODE=release
      - LOG_LEVEL=info
      - LLM_ENABLE_DEBUG=false
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 30s
        order: start-first
    # 生产环境不直接暴露端口，通过nginx代理
    ports: []

  # 日志轮转和清理
  logrotate:
    image: alpine:latest
    container_name: ${COMPOSE_PROJECT_NAME:-moonshot-prod}-logrotate
    command: |
      sh -c '
        echo "0 2 * * * find /var/log -name "*.log" -mtime +7 -delete" | crontab -
        crond -f
      '
    volumes:
      - /var/log:/var/log
    restart: unless-stopped
    profiles: ["prod"]

networks:
  moonshot-network:
    name: ${NETWORK_NAME:-moonshot-prod}
    driver: bridge